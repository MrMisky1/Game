import * as THREE from 'three';
import { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls.js';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';

let scene, camera, renderer, controls;
let bullets = [], enemies = [];
let playerHealth = 100;
const enemyModels = [];
const loader = new GLTFLoader();

function init() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 1.6, 5);

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    controls = new PointerLockControls(camera, document.body);
    document.addEventListener("click", () => controls.lock());

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(5, 10, 5).normalize();
    scene.add(light);

    const floor = new THREE.Mesh(new THREE.PlaneGeometry(50, 50), new THREE.MeshStandardMaterial({ color: 0x555555 }));
    floor.rotation.x = -Math.PI / 2;
    scene.add(floor);

    loader.load('/mnt/data/uploads_files_4440240_Action_suit_model_man.glb', (gltf) => {
        enemyModels.push(gltf.scene);
        spawnEnemy();
    });

    document.addEventListener("keydown", onKeyDown);
    document.addEventListener("keyup", onKeyUp);
    document.addEventListener("click", shoot);
}

function spawnEnemy() {
    if (enemyModels.length === 0) return;
    const enemy = enemyModels[0].clone();
    enemy.position.set(Math.random() * 20 - 10, 0, Math.random() * -20);
    enemy.health = 3;
    scene.add(enemy);
    enemies.push(enemy);
    enemyShoot(enemy);
}

function shoot() {
    let bullet = new THREE.Mesh(new THREE.SphereGeometry(0.1, 8, 8), new THREE.MeshStandardMaterial({ color: 0xffff00 }));
    bullet.position.copy(camera.position);
    bullet.velocity = new THREE.Vector3().copy(camera.getWorldDirection(new THREE.Vector3())).multiplyScalar(0.5);
    scene.add(bullet);
    bullets.push(bullet);
}

function enemyShoot(enemy) {
    setInterval(() => {
        if (Math.random() > 0.7) {
            let bullet = new THREE.Mesh(new THREE.SphereGeometry(0.1, 8, 8), new THREE.MeshStandardMaterial({ color: 0xff0000 }));
            bullet.position.copy(enemy.position);
            bullet.velocity = new THREE.Vector3().subVectors(camera.position, enemy.position).normalize().multiplyScalar(0.3);
            scene.add(bullet);
            bullets.push(bullet);
        }
    }, 2000);
}

function update() {
    enemies.forEach((enemy, index) => {
        let direction = new THREE.Vector3().subVectors(camera.position, enemy.position).normalize();
        enemy.position.add(direction.multiplyScalar(0.02));
    });
}

function animate() {
    requestAnimationFrame(animate);
    update();
    renderer.render(scene, camera);
}

init();
animate();
